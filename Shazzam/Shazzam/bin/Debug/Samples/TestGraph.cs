//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shazzam.Shaders {
    using System.Windows;
    using System.Windows.Media;
    using System.Windows.Media.Effects;
    
    
    public class AutoGenShaderEffect : ShaderEffect {
        
        public static DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(AutoGenShaderEffect), 0);
        
        public static DependencyProperty WavedepthProperty = DependencyProperty.Register("Wavedepth", typeof(double), typeof(AutoGenShaderEffect), new System.Windows.UIPropertyMetadata(new double(), PixelShaderConstantCallback(0)));
        
        public static DependencyProperty WavewidthProperty = DependencyProperty.Register("Wavewidth", typeof(double), typeof(AutoGenShaderEffect), new System.Windows.UIPropertyMetadata(new double(), PixelShaderConstantCallback(1)));
        
        public AutoGenShaderEffect(PixelShader shader) {
            PixelShader = shader;
            // Update each DependencyProperty that's registered with a shader register.
            // This is needed to ensure the shader gets sent the proper default value.
            this.UpdateShaderValue(InputProperty);
            this.UpdateShaderValue(WavedepthProperty);
            this.UpdateShaderValue(WavewidthProperty);
        }
        
        public virtual System.Windows.Media.Brush Input {
            get {
                return ((System.Windows.Media.Brush)(GetValue(InputProperty)));
            }
            set {
                SetValue(InputProperty, value);
            }
        }
        
        public virtual double Wavedepth {
            get {
                return ((double)(GetValue(WavedepthProperty)));
            }
            set {
                SetValue(WavedepthProperty, value);
            }
        }
        
        public virtual double Wavewidth {
            get {
                return ((double)(GetValue(WavewidthProperty)));
            }
            set {
                SetValue(WavewidthProperty, value);
            }
        }
    }
}
